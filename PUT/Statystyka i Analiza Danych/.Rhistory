for(i in 1:2){
print(paste("W roku", i+2009, "sredni plon wynosil", round(mean(na.omit(truskawki[,i])), 2) ))
print(paste("W co najmniej 25% obserwacji plon był niewiększy niż ta wartość, a w co najmniej 75%
plony był niemniejszy niż tak wartość", quantile(na.omit(truskawki[,i]), probs = 0.25)))
print(paste("Mediana zbiorow wynosiła", quantile(na.omit(truskawki[,i]), probs = 0.5)))
print(paste("Wariancja wynosi", var(na.omit(truskawki[,i])), "Odchylenie standardowe",
sd(na.omit(truskawki[,i])) ))
print(paste("Wspolczynnik zmiennosci wynosi",
round(sd(na.omit(truskawki[,i]))/mean(na.omit(truskawki[,i])), 2)*100, "%" ))
}
dane2011 = truskawki[,2]
dane2010 = truskawki[,1]
dane2011 = na.omit(truskawki[,2])
pie(cut(dane2010, 6))
x1 = table(cut(dane2010, 6))
pie(x1)
x2 = table(cut(dane2011, 5))
pie(x2)
for(i in 1:2){
discrete.hist(na.omit(truskawki[,i]), xlab = i, freq = FALSE)
}
for(i in 1:2){
discrete.hist(na.omit(truskawki[,i]), xlab = paste("Rok",i+2009), freq = FALSE)
}
boxplot(truskawki)
#Wykresy pudełkowe
boxplot(truskawki)
prob = dbinom(s, p, n)
n = 5
p = 0.3
s = 0:5
prob = dbinom(s, p, n)
n = 5
p = 0.3
s = 0:n
prob = dbinom(s, n, p)
n = 5
p = 0.3
s = 0:n
prob = dbinom(s, n, p)
sum(prob>3)
sum(prob[s>=3])
plot(s, prob, type ="h", col = "blue")
prob2 = dbinom(s2, n2, p2)
n2 = 8
p2 = 0.9
s2 = 0:n2
prob2 = dbinom(s2, n2, p2)
round(sum(prob2*s), 0)
round(sum(prob2*s2), 0)
lam = 0.01
t = exp(lam)
curve(dexp(x, lam), 0, 4/lam)
dys = 1 -pexp(200, lam)
pexp(500, lam)
#lambda = 1/srednia
lam2 = 1/2.4
curve(dexp(x, lam2), 0, 4/lam)
curve(dexp(x, lam2), 0, 4/lam2)
1 - pexp(3, lam2)
mi = 0.13
sigma = 0.005
curve(dnorm(x, mi, sigma), mi - 3*sigma, mi+3*sigma)
#F(0,14) - F(0,12)
pnorm(0.14, mi, sigma) - pnorm(0.12, mi, sigma)
mi = 120
sigma = 15
curve(dnorm(x, mi, sigma), mi -3*sigma, mi + 3*sigma)
pnorm(135,mi,sigma)-pnorm(111,mi,sigma)
mi = 46.8
sigma = 1.75
curve(dnorm(x, mi, sigma), mi - 3*sigma, mi + 3*sigma)
pnorm(50, mi, sigma)
prob=12
diamenty=dane[0:prob,1]
dane=read.csv("dane_est.csv",sep=";",dec=",")
View(dane)
prob=12
diamenty=dane[0:prob,1]
#ocena punktowa
xbar=mean(diamenty)
war=var(diamenty)
print(war)
#odchyelenie-sigmadaszek
os=sd(diamenty)
print(os)
dane = read.csv("dane_est.csv", sep = ";", dec = ",")
diam = na.omit(dane$diamenty)
# ZADANIE 1
#wszystkie diamenty produkowane tą metodą - populacja
#diamenty wybrane do badania - próba
#waga (w karatach) - zmienna
xbar = mean(diam)
ssq = var(diam) #wariancja s^2
s = sd(diam)  #lub sqrt(ssq)
n = length(diam)
alfa = 0.05
kwantyl = qt(1 - alfa/2, n - 1)
L = xbar - kwantyl*s/sqrt(n)
U = xbar + kwantyl*s/sqrt(n)
ttt = t.test(diam, conf.level = 1 - alfa)
ttt$conf.int
ttt2 = t.test(diam, conf.level = 0.98)  #98 to wartosc domyslna
ttt2$conf.int
L = (n-1)*ssq/qchisq(1-alfa/2, n-1)
P = (n-1)*ssq/qchisq(alfa/2, n-1)
sigma.test(diam)
library(BSDA)
L = (n-1)*ssq/qchisq(1-alfa/2, n-1)
P = (n-1)*ssq/qchisq(alfa/2, n-1)
sigma.test(diam)
detach("package:BSDA", unload = TRUE)
library(BSDA)
sigma.test(diam)
library(BSDA)
sigma.test(diam)
library(BSDA)
help.search("sigma.test", package = "BSDA")
library(TeachingDemos)
L = (n-1)*ssq/qchisq(1-alfa/2, n-1)
P = (n-1)*ssq/qchisq(alfa/2, n-1)
sigma.test(diam)
dane2 = c(16, 0, 0, 2, 3, 6, 8, 2, 5, 0, 12, 10, 5, 7, 2 , 3, 8, 17, 9, 1)
print(paste("Srednia zawartość PCB w próbkach badanych kobiet wynosi ", mean(dane2)))
print(paste("Wariancja poziomu PCB w próbkach badanych kobiet wynosi", var(dane2)))
print(paste("Odchylenie standardowe poziomu PCB w próbkach wynosi", sd(dane2)))
d = t.test(dane2, conf.level = 0.95)
d$conf.int
sigma.test(dane2)
d = t.test(dane2, conf.level = 0.95)
d$conf.int
#Z ufnośćią 95% przedział [3.42, 8.18] pokrywa prawdziwy nieznany średni poziom PCB w mleku wszystkich
sigma.test(dane2)
var_int = sigma.test(dane2, conf.level = 0.95)
var_int$conf.int
sqrt(var_int$conf.int)
wodorosty = na.omit(dane$wodorosty)
mean(wodorosty)
var(wodorosty)
xbar = t.test(wodorosty, conf.level = 0.9)
xbar$conf.int
wodorosty_var = sigma.test(wodorosty, conf.level = 0.9)
wodorosty_var$conf.int
n = 1200
xbar = 4.7
s = 2.2
zsum.test(xbar, s, n, conf.level = 0.95)
est_var = s^2
q1 = qchisq(1-alpha/2, n-1)
alfa = 0.05
est_var = s^2
q1 = qchisq(1-alpha/2, n-1)
alpha = 0.05
n = 1200
xbar = 4.7
s = 2.2
zsum.test(xbar, s, n, conf.level = 0.95)
est_var = s^2
q1 = qchisq(1-alpha/2, n-1)
q2 = qchisq(alpha/2, n-1)
L = (n-1)*est_var/q1
U = (n-1)*est_var/q2
sqrt(L)
sqrt(U)
n = 365
xbar = 102
ssq = 81
s = sqrt(ssq)
zsum.test(xbar, s, n, conf.level = 0.98)
zsum.test(xbar, s, n, conf.level = 1)
zsum.test(xbar, s, n, conf.level = 0.98)
zsum.test(xbar, s, n, conf.level = 0.98)
dane = read.csv("opisowa.csv", sep = ";")
View(dane)
egzamin = na.omit(dane$egzamin)
mean(egzamin)
sd(egzamin)
table(cut(egzamin, 5, 25))
table(cut(egzamin, 5))
table?
cut?
help(cut)
help(table, cut)
help("table")
help("cut")
table(cut(egzamin, breaks = 5))
table(cut(egzamin, breaks = c(25, 30)))
table(cut(egzamin, breaks = c(25, 30, 35, 40, 45)))
table(cut(egzamin, breaks = c(25, 30, 35, 40, 45, 50)))
kolowy = table(cut(egzamin, breaks = c(25, 30, 35, 40, 45, 50)))
pie(kolowy)
pie(kolowy)
n = 6
p = 0.82
u = 0:n
prob = dbinom(u,n,p)
prob
rbind(u,prob)
#b) liczba urzadzen wymagajacych naprawy nie mniejsza niz 2 czyli >=2
prob[u>=2]
#b) liczba urzadzen wymagajacych naprawy nie mniejsza niz 2 czyli >=2
sum(prob[u>=2])
#c)
sum(u*prob)
round(sum(u*prob))
#centralne twierdzenie graniczne  #T~app N(mi*proba,si*sqrt(proba))
#mi -> wartosc oczekiwana   si -> odchylenie
pnorm(47,e*n,odchylenie*sqrt(n))
n = 10000
e = 257
odchylenie = 152
pnorm(47,e*n,odchylenie*sqrt(n))
#centralne twierdzenie graniczne  #T~app N(mi*proba,si*sqrt(proba))
#mi -> wartosc oczekiwana   si -> odchylenie
pnorm(2550000,e*n,odchylenie*sqrt(n))
cisnienie = na.omit(dane$cisnienie)
var_int = sigma.test(cisnienie, probs = 0.92)
var_int$conf.int
#wariancja = sd^2
sqrt(var_int$conf.int)
dane = read.csv("dane_hip.csv", sep = ";", dec = ',')
dane = read.csv("dane_hip.csv", sep = ";", dec = ',')
View(dane)
#(1. Napisz hipoteze) H0: mi <=  4    H1: mi >  4
#(2. Wybierz procedure testową) przypadek 3: normalny, sigma nieznane
wiatr = na.omit(dane$wiatr)
n = length(wiatr)
xbar = mean(wiatr)
s = sd(wiatr)
mi0 = 4
t = (xbar - mi0) / (s/sqrt(n))
#(3. Obszar krytyczny)
qt(1 - alfa, n - 1)
alfa = 0.05
#(3. Obszar krytyczny)
qt(1 - alfa, n - 1)
#OPCJA DRUGA
#(2. Wybór funkcji testowej)
t.test(wiatr, mi = mi0, alternative = "greater")
ttt$p.value
ttt = t.test(wiatr, mi = mi0, alternative = "greater")
ttt$p.value
#OPCJA DRUGA
#(2. Wybór funkcji testowej)
ttt = t.test(wiatr, mi = mi0, alternative = "greater")
ttt$p.value
ttt = t.test(wiatr, mi = mi0, alternative = "greater")
ttt$p.value
ttt = t.test(wiatr, mu = mi0, alternative = "greater")
ttt$p.value
pompa = na.omit(dane$pompa)
n = length(pompa)
xbar = mean(pompa)
s = sd(pompa)
mi0 = 4
alfa = 0.05
mi0 = 3.5
alfa = 0.01
t = (xbar - mi0) / (s/sqrt(n))
qt(1 - alfa, n - 1)
ttt = t.test(pompa, mu = mi0, alternative = "greater")
ttt$p.value
ttt = t.test(pompa, mu = mi0, alternative = "less")
ttt$p.value
ttt
t = (xbar - mi0) / (s/sqrt(n))
qt(1 - alfa, n - 1)
(n-1)*s2 / 0.02
mleko = dane$mleko
n = length(mleko)
s2 = var(mleko)
(n-1)*s2 / 0.02
x = ((n - 1)*var(mleko)) / 0.02
x = ((n - 1)*s2) / 0.02
mleko = na.omit(dane$mleko)
n = length(mleko)
s2 = var(mleko)
x = ((n - 1)*s2) / 0.02
alfa = 0.05
qchisq(alfa, n -1)
library(TeachingDemos)
# R = (0, 3.32)
# nie nalezy do R NIE ODRZUCAMY
sigma.test(mleko, sigmasq = 0.02, alternative = "less")
#ZADANIE 10
# H0: p <= 0.9  H1 p > 0.9
n = 1100
T = 1000
pdaszek = T/n
p0 = 0.9
Z = (pdaszek - p0) / (sqrt(p0*(1-p0)) / sqrt(n))
qchisq(alfa, n - 1)
binom.test(T, n, alternative = "greater")
binom.test(T, n, p = 0.9, alternative = "greater")
dane = read.csv("DwiePopulacje.csv", sep = ";", dec = ",")
dane = read.csv("DwiePopulacje.csv", sep = ";", dec = ",")
View(dane)
cel1 = na.omit(dane$cel1)
cel2 = na.omit(dane$cel2)
t.test(cel1, cel2, var.equal = true, mu = 0, alternative = "two.sided")
t.test(cel1, cel2, var.equal = T, mu = 0, alternative = "two.sided")
t.test(cel1, cel2, var.equal = TRUE, mu = 0, alternative = "two.sided")
dane = read.csv("DwiePopulacje.csv", sep = ";")
cel1 = na.omit(dane$cel1)
cel2 = na.omit(dane$cel2)
t.test(cel1, cel2, var.equal = TRUE, mu = 0, alternative = "two.sided")
install.packages("PairedData")
library(PairedData)
var.test(cel1, cel2)
t.test(cel1, cel2, var.equal = TRUE, conf.level = 0.98)
nowa = na.omit(dane$nowa)
tradycyjna = na.omit(dane$tradycyjna)
#H0 mut <= mun  H1: mut > mu
var.test(tradycyjna, nowa)
#H0 mut <= mun  H1: mut > mu
var.test(tradycyjna, nowa, conf.level = 0.1)
#H0 mut <= mun  H1: mut > mu
var.test(tradycyjna, nowa, conf.level = 0.9)
#alpha = 0.1 < pval = 0.32 nie odrzucamy H0
#alpha = 0.02 < pval = 0.32 nie odrzucamy H0
t.test(tradycyjna, nowa, var.equal = TRUE, conf.level = 0.9)
#alpha = 0.1 < pval = 0.36 nie odrzucamy H0
t.test(tradycyjna, nowa, var.equal = TRUE, mu = 0, alternative = "two.sided", conf.level = 0.9)
#alpha = 0.1 < pval = 0.36 nie odrzucamy H0
t.test(tradycyjna, nowa, var.equal = TRUE, mu = 0, alternative = "two.sided", conf.level = 0.1)
#alpha = 0.1 < pval = 0.36 nie odrzucamy H0
t.test(tradycyjna, nowa, var.equal = TRUE, mu = 0, alternative = "two.sided")
#alpha = 0.1 < pval = 0.36 nie odrzucamy H0
t.test(tradycyjna, nowa, var.equal = TRUE, alternative = "greater")
publiczny = na.omit(dane$publiczny)
prywatny = na.omit(dane$prywatny)
#H0 mupub >= mupry    H1: mupub < mupry
var.test(publiczny, prywatny)
#alpha = 0.1 > pvalue = 0.09
#wariancje nie sa rowne
t.test(publiczny, prywatny, var.equal = FALSE, alternative="smaller")
#alpha = 0.1 > pvalue = 0.09
#wariancje nie sa rowne
t.test(publiczny, prywatny, var.equal = FALSE, alternative="less")
zawodnik2 = na.omit(dane$zawodnik2)
zawodnik1 = na.omit(dane$zawodnik1)
#H0: var1 >= var2  H1: var1 < var2
var.test(publiczny, prywatny, alternative = "less")
#H0: var1 >= var2  H1: var1 < var2
var.test(zawodnik1, zawodnik2, alternative = "less")
tP = 1200 * 0.78
tA = 2000 * 0.8
phat = (tP + tA) / (nP + nA)
nP = 1200
nA = 2000
tP = nP * 0.78
tA = nA * 0.8
phat = (tP + tA) / (nP + nA)
z = (phatP - phatA)/sqrt(phat*(1-phat)*(1/nP+1/nA))
phatP = 0.78
phatA = 0.8
phat = (tP + tA) / (nP + nA)
z = (phatP - phatA)/sqrt(phat*(1-phat)*(1/nP+1/nA))
dane = read.csv("Anova_cisnienie.csv")
View(dane)
dane = read.csv("Anova_cisnienie.csv", sep = ";")
#H0: un = uś = uw = ubw   H1: ~H0
#F = mst/mse
wyniki = c(dane$Niskie, dane$Srednie, dane$Silne, dane$BardzoSilne)
dane = read.csv("Anova_cisnienie.csv", sep = ";")
#H0: un = uś = uw = ubw   H1: ~H0
#F = mst/mse
wyniki = c(dane$Niskie, dane$Srednie, dane$Silne, dane$BardzoSilne)
lab = names(dane)
obiekty = rep(lab, 10)
obiekty = rep(lab, each = 10)
data.frame(wyniki, obiekty)
bartlett.test(wyniki, obiekty)
T1 = sum(dane$niskie)
T1 = sum(dane$Niskie)
T2 = sum(dane$Srednie)
T3 = sum(dane$Silne)
T4 = sum(dane$BardzoSilne)
T = sum(dane)
n1 = length(dane$Niskie)
n2 = length(dane$Srednie)
n3 = length(dane$Silne)
n4 = length(dane$BardzoSilne)
n = n1 + n2 + n3 + n4
SSG = sum(dane^2) - T^2/N
SSG = sum(dane^2) - T^2/N
SSG = sum(dane^2) - T^2/n
SST = T1^2/n1 + T2^2/n2 + T3^2/n3 + T4^2/n4 - T^2/n
SSE = SSG - SST
MST = SST/3
MSE = SSE/36
F = MST/MSE
qf(0.95, 3, 36)
anova(ln(wyniki~obiekty))
anova(lm(wyniki~obiekty))
a$Pr(>F)
a=anova(lm(wyniki~obiekty))
a$Pr(>F)
a$'Pr(>F)'
dane3 = read.csv("Anova_mikrometr.csv")
dane3 = read.csv("Anova_mikrometr.csv", sep = ";")
View(dane3)
wyniki3 = c(na.omit(dane3$mikrometrI), na.omit(dane3$mikrometrII), na.omit(dane3$mikrometrIII))
lab3 = names(dane3)
dane3 = read.csv("Anova_mikrometr.csv", sep = ";", dec = ",")
wyniki3 = c(na.omit(dane3$mikrometrI), na.omit(dane3$mikrometrII), na.omit(dane3$mikrometrIII))
obiekty = ("mikrometrI", "mikrometrI", "mikrometrI", "mikrometrI", "mikrometrII", "mikrometrII", "mikrometrII",
dane4 = read.csv("Anova_sportowcy", sep = ";")
dane4 = read.csv("Anova_sportowcy.csv", sep = ";")
View(dane4)
N = dane4$Niepalacy
L = dane4$Lekkopalacy
S = dane4$Sredniopalacy
D = dane4$Duzopalacy
wyniki = c(N, L, S, D)
obiekty = rep(names(dane), each = length(N))
data.frame(wyniki, obiekty)
bartlett.test(wyniki, obiekty)
anova(lm(wyniki, obiekty))
anova(lm(wyniki~obiekty))
plot(TukeyHSD(aov(wyniki, obiekty)))
dane_arszenik = read.csv("Reg_arszenik.csv")
dane_arszenik = read.csv("Reg_arszenik.csv", sep = ";")
dane_chem = read.csv("Reg_chemikalia.csv", sep = ";")
dane_urzad = read.csv("Reg_urzadzenie.csv", sep = ";")
View(dane_arszenik)
View(dane_chem)
View(dane_urzad)
View(dane_arszenik)
View(dane_chem)
View(dane_chem)
install.packages("nortest")
plot(x, y)
x = dane_chem$surowiec
y = dane_chem$produkt
plot(x, y)
plot(y~x)
cov(x, y)
#Ponieważ kowariancja jest dodatnia, to wraz ze wzrostem ilości zużytego surowca
#rośnie wartość produkcji
cor(x, y)
#Istnieje bardzo silna zależność liniowa między ilością zużytego surowca a wielkością produkcji
b1 = cov(x, y)/var(x)
b0 = mean(y) -b1*mean(x)
b1
b0
# y = 3.62x + 22.4
curve(b0+b1*x, 0, 25, add = T)
#Istnieje bardzo silna zależność liniowa między ilością zużytego surowca a wielkością produkcji
b1hat = cov(x, y)/var(x)
b0hat = mean(y) -b1hat*mean(x)
# y = 3.62x + 22.4
curve(b0hat+b1hat*x, 0, 25, add = T)
dane_arszenik = read.csv("Reg_arszenik.csv", sep = ";")
dane_chem = read.csv("Reg_chemikalia.csv", sep = ";")
dane_urzad = read.csv("Reg_urzadzenie.csv", sep = ";")
x = dane_chem$surowiec
y = dane_chem$produkt
plot(y~x)
cov(x, y)
#Jest niezerowa więc istnieje
#Ponieważ kowariancja jest dodatnia, to wraz ze wzrostem ilości zużytego surowca
#rośnie wartość produkcji
cor(x, y)
#Istnieje bardzo silna zależność liniowa między ilością zużytego surowca a wielkością produkcji
b1hat = cov(x, y)/var(x)
b0hat = mean(y) -b1hat*mean(x)
# y = 3.62x + 22.4
curve(b0hat+b1hat*x, 0, 25, add = T)
lm(y~x)
prosta = lm(y~x)
prosta$coefficients
prosta$coefficients[1]
plot(y~x)
abline(prosta)
prosta$coefficients[1] + prosta$coefficients[2]*20
predict(prosta, data.frame(x = 20))
predict(prosta, data.frame(x = c(15, 20)))
Rsq = cor(x, y)^2
Rsq = (cor(x, y))^2
Rsq = (cor(x, y))^2
#Zmienność wielkośi produkcji jest w 80% wyjaśniona przez zmienność ilości surowca
#H0 b1 = 0    H1: b1 != 0
annova(prosta)
#Zmienność wielkośi produkcji jest w 80% wyjaśniona przez zmienność ilości surowca
#H0 b1 = 0    H1: b1 != 0
anova(prosta)
x = dane_arszenik$pH
y = dane_arszenik$arszenik
plot(y~x)
y = dane_arszenik$arszenik
plot(x~y)
plot(x, y)
dane_arszenik = read.csv("Reg_arszenik.csv", sep = ";", dec = ",")
x = dane_arszenik$pH
y = dane_arszenik$arszenik
plot(x, y)
cov(x, y)
cor(x, y)
prosta = lm(y~x)
View(prosta)
prosta$coefficients[1]
prosta$coefficients[2]
b0hat = prosta$coefficients[1]
b1hat = prosta$coefficients[2]
#maleje o 18.03
predict(prosta, data.frame(x = c(7.5, 9)))
Rsq = cor(x, y)^2
#H0 b1 = 0    H1: b1 != 0
anova(prosta)
curve(prosta)
abline(prosta)
